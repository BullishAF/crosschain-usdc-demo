{
  "address": "0x7702D224F7919db9528f0449c8a61B60f5E5BBfD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_circleBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyForecalled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TradeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "refundAddress",
          "type": "address"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "SwapPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "tradeData",
          "type": "bytes"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain_",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "addSibling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "amountPostFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circleBridge",
      "outputs": [
        {
          "internalType": "contract CircleBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "destinationDomains",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "forecaller",
          "type": "address"
        }
      ],
      "name": "forecall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "forecaller",
          "type": "address"
        }
      ],
      "name": "forecallWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "tradeData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "fallbackRecipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "inputPos",
          "type": "uint16"
        }
      ],
      "name": "nativeSendTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "tradeData1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "tradeData2",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "traceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "fallbackRecipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "inputPos",
          "type": "uint16"
        }
      ],
      "name": "nativeTradeSendTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "siblings",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract USDC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x93df37bff96c32af8c1d8b7eec3b8450567a94c902769f14365bba4d8a13a3e3",
  "receipt": {
    "to": null,
    "from": "0xa411977dd24F1547065C6630E468a43275cB4d7f",
    "contractAddress": "0x7702D224F7919db9528f0449c8a61B60f5E5BBfD",
    "transactionIndex": 11,
    "gasUsed": "4358598",
    "logsBloom": "0x
    "blockHash": "0x685bd59f1a07215d765567b957514039fe3a95bc17f0b561d36f90879c363f33",
    "transactionHash": "0x93df37bff96c32af8c1d8b7eec3b8450567a94c902769f14365bba4d8a13a3e3",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 2830196,
        "transactionHash": "0x93df37bff96c32af8c1d8b7eec3b8450567a94c902769f14365bba4d8a13a3e3",
        "address": "0x7702D224F7919db9528f0449c8a61B60f5E5BBfD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a411977dd24f1547065c6630e468a43275cb4d7f"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x685bd59f1a07215d765567b957514039fe3a95bc17f0b561d36f90879c363f33"
      }
    ],
    "blockNumber": 2830196,
    "cumulativeGasUsed": "4766356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5769D84DD62a6fD969856c75c7D321b84d455929",
    "0xbE406F0189A0B4cf3A05C286473D23791Dd44Cc6",
    "0xE5055679b3952AEfeB7069672a26B8CE7AD8fcb6",
    "0x56766Ac03a2Ed19a302D11F22D6da20FF0bF6695",
    "0xD909178CC99d318e4D46e7E66a972955859670E1"
  ],
  "numDeployments": 7,
  "solcInputHash": "2e46b41892e17a3546ec0daebdb77acb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_circleBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyForecalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"SwapPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain_\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"addSibling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"amountPostFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleBridge\",\"outputs\":[{\"internalType\":\"contract CircleBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"destinationDomains\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"forecaller\",\"type\":\"address\"}],\"name\":\"forecall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forecaller\",\"type\":\"address\"}],\"name\":\"forecallWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"inputPos\",\"type\":\"uint16\"}],\"name\":\"nativeSendTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"tradeData1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tradeData2\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"traceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"inputPos\",\"type\":\"uint16\"}],\"name\":\"nativeTradeSendTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"siblings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract USDC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CircleSwapExecutable.sol\":\"CircleSwapExecutable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarForecallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\nimport { IERC20 } from './IERC20.sol';\\n\\nabstract contract IAxelarForecallable {\\n    error NotApprovedByGateway();\\n    error AlreadyForecalled();\\n    error TransferFailed();\\n\\n    IAxelarGateway public gateway;\\n    mapping(bytes32 => address) forecallers;\\n\\n    constructor(address gatewayAddress) {\\n        gateway = IAxelarGateway(gatewayAddress);\\n    }\\n\\n    function forecall(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        address forecaller\\n    ) external {\\n        _checkForecall(sourceChain, sourceAddress, payload, forecaller);\\n        if (forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] != address(0)) revert AlreadyForecalled();\\n        forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] = forecaller;\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash)) revert NotApprovedByGateway();\\n        address forecaller = forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))];\\n        if (forecaller != address(0)) {\\n            forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload))] = address(0);\\n        } else {\\n            _execute(sourceChain, sourceAddress, payload);\\n        }\\n    }\\n\\n    function forecallWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount,\\n        address forecaller\\n    ) external {\\n        address token = gateway.tokenAddresses(tokenSymbol);\\n        uint256 amountPost = amountPostFee(amount, payload);\\n        _safeTransferFrom(token, msg.sender, amountPost);\\n        _checkForecallWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount, forecaller);\\n        if (forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] != address(0))\\n            revert AlreadyForecalled();\\n        forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] = forecaller;\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amountPost);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (!gateway.validateContractCallAndMint(commandId, sourceChain, sourceAddress, payloadHash, tokenSymbol, amount))\\n            revert NotApprovedByGateway();\\n        address forecaller = forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))];\\n        if (forecaller != address(0)) {\\n            forecallers[keccak256(abi.encode(sourceChain, sourceAddress, payload, tokenSymbol, amount))] = address(0);\\n            address token = gateway.tokenAddresses(tokenSymbol);\\n            _safeTransfer(token, forecaller, amount);\\n        } else {\\n            _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n        }\\n    }\\n\\n    function _execute(\\n        string memory sourceChain,\\n        string memory sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string memory sourceChain,\\n        string memory sourceAddress,\\n        bytes calldata payload,\\n        string memory tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    // Override this to keep a fee.\\n    function amountPostFee(\\n        uint256 amount,\\n        bytes calldata /*payload*/\\n    ) public virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    // Override this and revert if you want to only allow certain people/calls to be able to forecall.\\n    function _checkForecall(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        address forecaller\\n    ) internal virtual {}\\n\\n    // Override this and revert if you want to only allow certain people/calls to be able to forecall.\\n    function _checkForecallWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount,\\n        address forecaller\\n    ) internal virtual {}\\n\\n    function _safeTransfer(\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory returnData) = tokenAddress.call(abi.encodeWithSelector(IERC20.transfer.selector, receiver, amount));\\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n\\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\\n    }\\n\\n    function _safeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory returnData) = tokenAddress.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, address(this), amount)\\n        );\\n        bool transferred = success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n\\n        if (!transferred || tokenAddress.code.length == 0) revert TransferFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x2031d2c2ff7120c6403ab2af4e9100b415a45101d6ae2664ebd184a266bd458e\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './IUpgradable.sol';\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService is IUpgradable {\\n    error NothingReceived();\\n    error TransferFailed();\\n    error InvalidAddress();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(bytes32 indexed txHash, uint256 indexed logIndex, address gasToken, uint256 gasFeeAmount, address refundAddress);\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(address payable receiver, address[] calldata tokens) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5e8b391cc6c2f528ff0eaab218bc1395329ab959872cd590d682be2321cfb76\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(address indexed sender, string destinationChain, string destinationAddress, string symbol, uint256 amount);\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"keccak256\":\"0x810f2eab60267046fc188b8357b73d81d7b7959959781cb8b90b7957d162b05e\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    error InvalidAccount();\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x9e0821bdcdd893b070fab69ec20053ff99d96bc25054c349a9112036a23d9e5c\",\"license\":\"MIT\"},\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// General interface for upgradable contracts\\ninterface IUpgradable {\\n    error NotOwner();\\n    error InvalidOwner();\\n    error InvalidCodeHash();\\n    error InvalidImplementation();\\n    error SetupFailed();\\n    error NotProxy();\\n\\n    event Upgraded(address indexed newImplementation);\\n    event OwnershipTransferred(address indexed newOwner);\\n\\n    // Get current owner\\n    function owner() external view returns (address);\\n\\n    function contractId() external pure returns (bytes32);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata params\\n    ) external;\\n\\n    function setup(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x27d750d5bce09e171601c0cc91325b8e2dda72732d6b188d185dd20554804f46\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CircleBridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./USDC.sol\\\";\\n\\ncontract CircleBridge is Ownable {\\n    // A mapping of destinationDomain to the corresponding destination chain's CircleBridge contract\\n    mapping(uint32 => bytes32) public circleBridgeSiblings;\\n    uint32 sourceDomain;\\n    uint64 nonce = 0;\\n    USDC private usdc;\\n\\n    constructor(address _usdc, uint32 _sourceDomain) {\\n        usdc = USDC(_usdc);\\n        sourceDomain = _sourceDomain;\\n    }\\n\\n    /**\\n    * @notice Emitted when a deposit for burn is received on local domain\\n    * @param depositor address where deposit is transferred from\\n    * @param burnToken address of token burnt on local domain\\n    * @param amount deposit amount\\n    * @param mintRecipient address receiving minted tokens on destination\\n    domain as bytes32\\n    * @param destinationDomain destination domain\\n    * @param destinationCircleBridge address of CircleBridge on destination\\n    domain as bytes32\\n    */\\n    event DepositForBurn(\\n        address depositor,\\n        address burnToken,\\n        uint256 amount,\\n        bytes32 mintRecipient,\\n        uint32 destinationDomain,\\n        bytes32 destinationCircleBridge\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched\\n     * @param message Raw bytes of message\\n     */\\n    event MessageSent(bytes message);\\n\\n    /**\\n    * @param _amount amount of tokens to burn\\n    * @param _destinationDomain destination domain\\n    * @param _mintRecipient address of mint recipient on destination domain\\n    * @param _burnToken address of contract to burn deposited tokens, on local\\n    domain\\n    * @return success bool, true if successful\\n    */\\n    function depositForBurn(\\n        uint256 _amount,\\n        uint32 _destinationDomain,\\n        bytes32 _mintRecipient,\\n        address _burnToken\\n    ) external returns (bool success) {\\n        usdc.burn(msg.sender, _amount);\\n        bytes memory messageBody = abi.encode(_amount, _mintRecipient);\\n        bytes memory message = abi.encode(\\n            sourceDomain,\\n            nonce,\\n            msg.sender,\\n            messageBody\\n        );\\n        nonce++;\\n        emit DepositForBurn(\\n            msg.sender,\\n            _burnToken,\\n            _amount,\\n            _mintRecipient,\\n            _destinationDomain,\\n            circleBridgeSiblings[_destinationDomain]\\n        );\\n        emit MessageSent(message);\\n        return true;\\n    }\\n\\n    /**\\n     * @param _domain destination domain\\n     * @param _circleBridge address of CircleBridge on destination domain\\n     */\\n    function addCircleBridgeSibling(uint32 _domain, bytes32 _circleBridge)\\n        external\\n        onlyOwner\\n    {\\n        circleBridgeSiblings[_domain] = _circleBridge;\\n    }\\n}\\n\",\"keccak256\":\"0x954183eeec421b151dfde04aa9d379b34540a07cb572fec288cff2326d2a7881\",\"license\":\"UNLICENSED\"},\"contracts/CircleSwapExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IAxelarForecallable} from \\\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarForecallable.sol\\\";\\nimport {IAxelarGasService} from \\\"@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {USDC} from \\\"./USDC.sol\\\";\\nimport {CircleBridge} from \\\"./CircleBridge.sol\\\";\\nimport \\\"./StringAddressUtils.sol\\\";\\n\\n// Only support a native token for now.\\ncontract CircleSwapExecutable is IAxelarForecallable, Ownable {\\n    error InvalidTrade();\\n    error InsufficientInput();\\n    error TradeFailed();\\n\\n    event SwapSuccess(bytes32 indexed traceId, uint256 amount, bytes tradeData);\\n\\n    event SwapFailed(\\n        bytes32 indexed traceId,\\n        uint256 amount,\\n        address refundAddress\\n    );\\n\\n    event SwapPending(\\n        bytes32 indexed traceId,\\n        bytes32 indexed payloadHash,\\n        uint256 amount,\\n        string destinationChain,\\n        bytes payload\\n    );\\n\\n    IAxelarGasService immutable gasReceiver;\\n    USDC public usdc;\\n    address public wrappedNativeToken;\\n    CircleBridge public circleBridge;\\n\\n    // destination chain name => destination contract address\\n    mapping(string => address) public siblings;\\n\\n    // destination chain name to destination chain id\\n    mapping(string => uint32) public destinationDomains;\\n\\n    constructor(\\n        address _gateway,\\n        address _gasReceiver,\\n        address _usdc,\\n        address _circleBridge,\\n        address _wrappedNativeAddress\\n    ) IAxelarForecallable(_gateway) Ownable() {\\n        gasReceiver = IAxelarGasService(_gasReceiver);\\n        usdc = USDC(_usdc);\\n        circleBridge = CircleBridge(_circleBridge);\\n        wrappedNativeToken = _wrappedNativeAddress;\\n    }\\n\\n    // Prevent accidentally call, which leds to nobody is able to call `addSibling`.\\n    function renounceOwnership() public override {}\\n\\n    modifier onlyValidChain(string memory _destinationChain) {\\n        require(\\n            siblings[_destinationChain] != address(0),\\n            \\\"CircleSwapExecutable: invalid destination chain\\\"\\n        );\\n        _;\\n    }\\n\\n    //Use this to register additional siblings. Siblings are used to send headers to as well as to know who to trust for headers.\\n    function addSibling(\\n        string memory chain_,\\n        uint32 chainId,\\n        address address_\\n    ) external onlyOwner {\\n        siblings[chain_] = address_;\\n        destinationDomains[chain_] = chainId;\\n    }\\n\\n    function _tradeSrc(bytes memory tradeData)\\n        internal\\n        returns (bool success, uint256 amount)\\n    {\\n        (\\n            address tokenIn,\\n            uint256 amountIn,\\n            address router,\\n            bytes memory data\\n        ) = abi.decode(tradeData, (address, uint256, address, bytes));\\n        if (tokenIn == address(0)) {\\n            (success, ) = router.call{value: amountIn}(data);\\n        } else {\\n            SafeERC20.safeTransferFrom(\\n                IERC20(tokenIn),\\n                msg.sender,\\n                address(this),\\n                amountIn\\n            );\\n            IERC20(tokenIn).approve(router, amountIn);\\n            (success, ) = router.call(data);\\n        }\\n\\n        return (success, amountIn);\\n    }\\n\\n    function _tradeDest(\\n        bytes memory tradeData,\\n        uint256 receiveAmount,\\n        address payable fallbackRecipient\\n    ) internal returns (bool success) {\\n        (address tokenIn, , address router, bytes memory data) = abi.decode(\\n            tradeData,\\n            (address, uint256, address, bytes)\\n        );\\n\\n        IERC20(tokenIn).approve(router, receiveAmount);\\n\\n        uint256 preWrappedNativeTokenBalance = tokenBalance(\\n            this.wrappedNativeToken()\\n        );\\n        (bool _success, ) = router.call(data);\\n        if (!_success) {\\n            return (false);\\n        }\\n        uint256 wrappedNativeTokenOutput = tokenBalance(\\n            this.wrappedNativeToken()\\n        ) - preWrappedNativeTokenBalance;\\n        if (wrappedNativeTokenOutput > 0) {\\n            (bool _withdrawSuccess, ) = this.wrappedNativeToken().call(\\n                abi.encodeWithSignature(\\n                    \\\"withdraw(uint256)\\\",\\n                    wrappedNativeTokenOutput\\n                )\\n            );\\n            if (!_withdrawSuccess) {\\n                return (false);\\n            }\\n            // get recipient from swap data\\n            bool sent = fallbackRecipient.send(wrappedNativeTokenOutput);\\n            return (sent);\\n        }\\n        return (true);\\n    }\\n\\n    function _nativeSendTrade(\\n        string memory destinationChain,\\n        bytes memory tradeData,\\n        uint256 amount,\\n        uint256 gasAmount,\\n        bytes32 traceId,\\n        address fallbackRecipient,\\n        uint16 inputPos\\n    ) private {\\n        bytes memory payload = abi.encode(\\n            tradeData,\\n            amount,\\n            traceId,\\n            fallbackRecipient,\\n            inputPos\\n        );\\n        gasReceiver.payNativeGasForContractCall{value: gasAmount}(\\n            address(this),\\n            destinationChain,\\n            AddressToString.toString(this.siblings(destinationChain)),\\n            payload,\\n            msg.sender\\n        );\\n        gateway.callContract(\\n            destinationChain,\\n            AddressToString.toString(this.siblings(destinationChain)),\\n            payload\\n        );\\n        emit SwapPending(\\n            traceId,\\n            keccak256(payload),\\n            amount,\\n            destinationChain,\\n            payload\\n        );\\n    }\\n\\n    function tokenBalance(address tokenAddress)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    function _trade(bytes memory tradeData1)\\n        private\\n        returns (uint256 amount, uint256 burnAmount)\\n    {\\n        uint256 preTradeBalance = tokenBalance(address(usdc));\\n\\n        (bool success, uint256 _amount) = _tradeSrc(tradeData1);\\n        require(success, \\\"TRADE_FAILED\\\");\\n\\n        uint256 _burnAmount = tokenBalance(address(usdc)) - preTradeBalance;\\n\\n        return (_amount, _burnAmount);\\n    }\\n\\n    function nativeTradeSendTrade(\\n        string memory destinationChain,\\n        bytes memory tradeData1,\\n        bytes memory tradeData2,\\n        bytes32 traceId,\\n        address fallbackRecipient,\\n        uint16 inputPos\\n    ) external payable onlyValidChain(destinationChain) {\\n        (uint256 amount, uint256 burnAmount) = _trade(tradeData1);\\n        bool burnSuccess = circleBridge.depositForBurn(\\n            burnAmount,\\n            this.destinationDomains(destinationChain),\\n            bytes32(uint256(uint160(this.siblings(destinationChain)))),\\n            address(this)\\n        );\\n\\n        require(burnSuccess, \\\"BURN_FAILED\\\");\\n\\n        _nativeSendTrade(\\n            destinationChain,\\n            tradeData2,\\n            burnAmount, // total burned amount (usdc)\\n            msg.value - amount, // total sent eth - eth for trade\\n            traceId,\\n            fallbackRecipient,\\n            inputPos\\n        );\\n    }\\n\\n    function nativeSendTrade(\\n        string memory destinationChain,\\n        uint256 amount,\\n        bytes memory tradeData,\\n        bytes32 traceId,\\n        address fallbackRecipient,\\n        uint16 inputPos\\n    ) external payable onlyValidChain(destinationChain) {\\n        usdc.transferFrom(msg.sender, address(this), amount);\\n        bool success = circleBridge.depositForBurn(\\n            amount,\\n            this.destinationDomains(destinationChain),\\n            bytes32(uint256(uint160(this.siblings(destinationChain)))),\\n            address(this)\\n        );\\n        require(success, \\\"DEPOSIT_FAILED\\\");\\n\\n        _nativeSendTrade(\\n            destinationChain,\\n            tradeData,\\n            amount,\\n            msg.value,\\n            traceId,\\n            fallbackRecipient,\\n            inputPos\\n        );\\n    }\\n\\n    function _refund(\\n        bytes32 traceId,\\n        uint256 amount,\\n        address recipient\\n    ) internal returns (bool) {\\n        _giveToken(amount, recipient);\\n        emit SwapFailed(traceId, amount, recipient);\\n        return false;\\n    }\\n\\n    function _receiveTrade(\\n        uint256 amount,\\n        bytes memory tradeData,\\n        bytes32 traceId,\\n        address payable fallbackRecipient,\\n        uint16 inputPos\\n    ) internal returns (bool) {\\n        address tokenAddressByPayload = abi.decode(tradeData, (address));\\n        if (tokenAddressByPayload != address(usdc))\\n            return _refund(traceId, amount, fallbackRecipient);\\n\\n        //This hack puts the amount in the correct position.\\n        assembly {\\n            mstore(add(tradeData, inputPos), amount)\\n        }\\n\\n        if (!_tradeDest(tradeData, amount, fallbackRecipient))\\n            return _refund(traceId, amount, fallbackRecipient);\\n\\n        emit SwapSuccess(traceId, amount, tradeData);\\n        return true;\\n    }\\n\\n    function _giveToken(uint256 amount, address destination) internal {\\n        SafeERC20.safeTransfer(IERC20(address(usdc)), destination, amount);\\n    }\\n\\n    function _execute(\\n        string memory, /*sourceChain*/\\n        string memory, /*sourceAddress*/\\n        bytes calldata payload\\n    ) internal override {\\n        (\\n            bytes memory data,\\n            uint256 amount,\\n            bytes32 traceId,\\n            address payable fallbackRecipient,\\n            uint16 inputPos\\n        ) = abi.decode(payload, (bytes, uint256, bytes32, address, uint16));\\n        _receiveTrade(amount, data, traceId, fallbackRecipient, inputPos);\\n    }\\n}\\n\",\"keccak256\":\"0x5afadb67f71aff5bbc0a45e921b1174125f275189a26361a3fa1595f0895ad55\",\"license\":\"MIT\"},\"contracts/StringAddressUtils.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nlibrary StringToAddress {\\n    function toAddress(string memory _a) internal pure returns (address) {\\n        bytes memory tmp = bytes(_a);\\n        if (tmp.length != 42) return address(0);\\n        uint160 iaddr = 0;\\n        uint8 b;\\n        for (uint256 i = 2; i < 42; i++) {\\n            b = uint8(tmp[i]);\\n            if ((b >= 97) && (b <= 102)) b -= 87;\\n            else if ((b >= 65) && (b <= 70)) b -= 55;\\n            else if ((b >= 48) && (b <= 57)) b -= 48;\\n            else return address(0);\\n            iaddr |= uint160(uint256(b) << ((41 - i) << 2));\\n        }\\n        return address(iaddr);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address a) internal pure returns (string memory) {\\n        bytes memory data = abi.encodePacked(a);\\n        bytes memory characters = \\\"0123456789abcdef\\\";\\n        bytes memory byteString = new bytes(2 + data.length * 2);\\n\\n        byteString[0] = \\\"0\\\";\\n        byteString[1] = \\\"x\\\";\\n\\n        for (uint256 i; i < data.length; ++i) {\\n            byteString[2 + i * 2] = characters[uint256(uint8(data[i] >> 4))];\\n            byteString[3 + i * 2] = characters[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(byteString);\\n    }\\n}\\n\",\"keccak256\":\"0x97f25dda0df5d963fbe2f995ca3250d30273efb53d0c7b01bec52795ab967c76\"},\"contracts/USDC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract USDC is ERC20Burnable, AccessControl {\\n    // Create a new role identifier for the minter role\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    constructor() ERC20(\\\"Circle USDC\\\", \\\"USDC\\\") {\\n        _mint(msg.sender, 1000000000000000000000000);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n\\n    function setMinterRole(address minter) public {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        _setupRole(MINTER_ROLE, minter);\\n    }\\n\\n    function setBurnerRole(address burner) public {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Caller is not an admin\\\");\\n        _setupRole(BURNER_ROLE, burner);\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        // Check that the calling account has the minter role\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"Caller is not a minter\\\");\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) public {\\n        require(hasRole(BURNER_ROLE, msg.sender), \\\"Caller is not a burner\\\");\\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x24d151d26113532e05f47f76fc57ff535e426d6c346557ac4bfe895b2e42b0aa\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004f3638038062004f368339818101604052810190620000379190620002d3565b84806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620000996200008d6200019b60201b60201c565b620001a360201b60201c565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200035b565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029b826200026e565b9050919050565b620002ad816200028e565b8114620002b957600080fd5b50565b600081519050620002cd81620002a2565b92915050565b600080600080600060a08688031215620002f257620002f162000269565b5b60006200030288828901620002bc565b95505060206200031588828901620002bc565b94505060406200032888828901620002bc565b93505060606200033b88828901620002bc565b92505060806200034e88828901620002bc565b9150509295509295909350565b608051614bbf620003776000396000611b1c0152614bbf6000f3fe6080604052600436106100fe5760003560e01c8063713a987611610095578063bb288a0311610064578063bb288a0314610323578063d3e488d51461034c578063daa0c91714610368578063e7fb058b14610384578063f2fde38b146103ad576100fe565b8063713a987614610267578063715018a6146102a45780638da5cb5b146102bb578063a7798b69146102e6576100fe565b80633ca2fd8e116100d15780633ca2fd8e146101ad5780633da2a4b5146101ea5780633e413bee14610213578063491606581461023e576100fe565b806301a67b6b14610103578063116191b61461012e57806317fcb39b146101595780631a98b2e014610184575b600080fd5b34801561010f57600080fd5b506101186103d6565b6040516101259190613017565b60405180910390f35b34801561013a57600080fd5b506101436103fc565b6040516101509190613053565b60405180910390f35b34801561016557600080fd5b5061016e610420565b60405161017b919061308f565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a691906131e5565b610446565b005b3480156101b957600080fd5b506101d460048036038101906101cf91906132f5565b610828565b6040516101e19190613364565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c9190613528565b610834565b005b34801561021f57600080fd5b506102286108db565b60405161023591906135b8565b60405180910390f35b34801561024a57600080fd5b50610265600480360381019061026091906135d3565b610901565b005b34801561027357600080fd5b5061028e6004803603810190610289919061369c565b610bcc565b60405161029b91906136f4565b60405180910390f35b3480156102b057600080fd5b506102b9610c05565b005b3480156102c757600080fd5b506102d0610c07565b6040516102dd919061308f565b60405180910390f35b3480156102f257600080fd5b5061030d6004803603810190610308919061369c565b610c31565b60405161031a919061308f565b60405180910390f35b34801561032f57600080fd5b5061034a6004803603810190610345919061370f565b610c7a565b005b610366600480360381019061036191906138b3565b610e71565b005b610382600480360381019061037d9190613978565b61120b565b005b34801561039057600080fd5b506103ab60048036038101906103a69190613a59565b611510565b005b3480156103b957600080fd5b506103d460048036038101906103cf9190613b69565b61182b565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008585604051610458929190613bc6565b6040518091039020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631876eed98c8c8c8c8c878b8b8b6040518a63ffffffff1660e01b81526004016104cb99989796959493929190613c2c565b602060405180830381600087803b1580156104e557600080fd5b505af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190613ce0565b610553576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160008c8c8c8c8c8c8c8c8c60405160200161057a99989796959493929190613d4b565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461073f576000600160008d8d8d8d8d8d8d8d8d60405160200161061c99989796959493929190613d4b565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663935b13f687876040518363ffffffff1660e01b81526004016106dc929190613dc2565b60206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c9190613dfb565b90506107398183866118af565b5061081a565b6108198b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050898989898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505088611a25565b5b505050505050505050505050565b60008390509392505050565b61083c611a2d565b8060068460405161084d9190613ea2565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816007846040516108aa9190613ea2565b908152602001604051809103902060006101000a81548163ffffffff021916908363ffffffff160217905550505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008282604051610913929190613bc6565b6040518091039020905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f6970c38989898989876040518763ffffffff1660e01b815260040161098096959493929190613eb9565b602060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190613ce0565b610a08576040517f500c44b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060016000898989898989604051602001610a2996959493929190613f10565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b2c576000600160008a8a8a8a8a8a604051602001610ac596959493929190613f10565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610bc1565b610bc088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508686611aab565b5b505050505050505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900463ffffffff1681565b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6006818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c8987878787878787611ae5565b600073ffffffffffffffffffffffffffffffffffffffff1660016000898989898989604051602001610cc096959493929190613f10565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d52576040517f35b7d55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000898989898989604051602001610d7296959493929190613f10565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e6887878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508585611aab565b50505050505050565b85600073ffffffffffffffffffffffffffffffffffffffff16600682604051610e9a9190613ea2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1790613fd4565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610f7f93929190613ff4565b602060405180830381600087803b158015610f9957600080fd5b505af1158015610fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd19190613ce0565b506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fd3504e883073ffffffffffffffffffffffffffffffffffffffff1663713a98768c6040518263ffffffff1660e01b815260040161104c9190614064565b60206040518083038186803b15801561106457600080fd5b505afa158015611078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c919061409b565b3073ffffffffffffffffffffffffffffffffffffffff1663a7798b698d6040518263ffffffff1660e01b81526004016110d59190614064565b60206040518083038186803b1580156110ed57600080fd5b505afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111259190613dfb565b73ffffffffffffffffffffffffffffffffffffffff1660001b306040518563ffffffff1660e01b815260040161115e94939291906140c8565b602060405180830381600087803b15801561117857600080fd5b505af115801561118c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b09190613ce0565b9050806111f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e990614159565b60405180910390fd5b61120188878934898989611aee565b5050505050505050565b85600073ffffffffffffffffffffffffffffffffffffffff166006826040516112349190613ea2565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b190613fd4565b60405180910390fd5b6000806112c688611dab565b915091506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fd3504e833073ffffffffffffffffffffffffffffffffffffffff1663713a98768e6040518263ffffffff1660e01b81526004016113449190614064565b60206040518083038186803b15801561135c57600080fd5b505afa158015611370573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611394919061409b565b3073ffffffffffffffffffffffffffffffffffffffff1663a7798b698f6040518263ffffffff1660e01b81526004016113cd9190614064565b60206040518083038186803b1580156113e557600080fd5b505afa1580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190613dfb565b73ffffffffffffffffffffffffffffffffffffffff1660001b306040518563ffffffff1660e01b815260040161145694939291906140c8565b602060405180830381600087803b15801561147057600080fd5b505af1158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190613ce0565b9050806114ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e1906141c5565b60405180910390fd5b6115048a898486346114fc9190614214565b8b8b8b611aee565b50505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663935b13f686866040518363ffffffff1660e01b815260040161156e929190613dc2565b60206040518083038186803b15801561158657600080fd5b505afa15801561159a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115be9190613dfb565b905060006115cd848989610828565b90506115da823383611e76565b6115ec8c8c8c8c8c8c8c8c8c8c611fee565b600073ffffffffffffffffffffffffffffffffffffffff16600160008e8e8e8e8e8e8e8e8e60405160200161162999989796959493929190613d4b565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116bb576040517f35b7d55000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600160008e8e8e8e8e8e8e8e8e6040516020016116e199989796959493929190613d4b565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061181d8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508a8a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086611a25565b505050505050505050505050565b611833611a2d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189a906142ba565b60405180910390fd5b6118ac81611ffa565b50565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016118e49291906142da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161194e919061433f565b6000604051808303816000865af19150503d806000811461198b576040519150601f19603f3d011682016040523d82523d6000602084013e611990565b606091505b509150915060008280156119c057506000825114806119bf5750818060200190518101906119be9190613ce0565b5b5b90508015806119e6575060008673ffffffffffffffffffffffffffffffffffffffff163b145b15611a1d576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b505050505050565b611a356120c0565b73ffffffffffffffffffffffffffffffffffffffff16611a53610c07565b73ffffffffffffffffffffffffffffffffffffffff1614611aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa0906143a2565b60405180910390fd5b565b60008060008060008686810190611ac29190614400565b94509450945094509450611ad984868585856120c8565b50505050505050505050565b50505050505050565b60008686858585604051602001611b099594939291906144df565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c93e3bb86308b611bea3073ffffffffffffffffffffffffffffffffffffffff1663a7798b698f6040518263ffffffff1660e01b8152600401611b959190614064565b60206040518083038186803b158015611bad57600080fd5b505afa158015611bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be59190613dfb565b6121b9565b86336040518763ffffffff1660e01b8152600401611c0c959493929190614539565b6000604051808303818588803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c92115f89611d0c3073ffffffffffffffffffffffffffffffffffffffff1663a7798b698d6040518263ffffffff1660e01b8152600401611cb79190614064565b60206040518083038186803b158015611ccf57600080fd5b505afa158015611ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d079190613dfb565b6121b9565b846040518463ffffffff1660e01b8152600401611d2b939291906145a1565b600060405180830381600087803b158015611d4557600080fd5b505af1158015611d59573d6000803e3d6000fd5b505050508080519060200120847f603f384676075b3ec165d26daed675db50dfd83d03f3d12e2eecad1a52da8221888b85604051611d99939291906145ed565b60405180910390a35050505050505050565b6000806000611ddb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124d6565b9050600080611de986612568565b9150915081611e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e249061467e565b60405180910390fd5b600083611e5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124d6565b611e659190614214565b905081819550955050505050915091565b6000808473ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b853086604051602401611ead93929190613ff4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f17919061433f565b6000604051808303816000865af19150503d8060008114611f54576040519150601f19603f3d011682016040523d82523d6000602084013e611f59565b606091505b50915091506000828015611f895750600082511480611f88575081806020019051810190611f879190613ce0565b5b5b9050801580611faf575060008673ffffffffffffffffffffffffffffffffffffffff163b145b15611fe6576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b50505050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080858060200190518101906120df91906146b3565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146121495761214185888661274c565b9150506121b0565b868387015261215986888661279d565b6121705761216885888661274c565b9150506121b0565b847f2eee7242b494decec975364a3a68cc2983c8c343618698e44ca690103af7617588886040516121a29291906146e0565b60405180910390a260019150505b95945050505050565b60606000826040516020016121ce9190614758565b604051602081830303815290604052905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000600283516122299190614773565b600261223591906147cd565b67ffffffffffffffff81111561224e5761224d613395565b5b6040519080825280601f01601f1916602001820160405280156122805781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106122b8576122b7614823565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061231c5761231b614823565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b83518110156124ca5782600485838151811061236d5761236c614823565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff16815181106123b3576123b2614823565b5b602001015160f81c60f81b826002836123cc9190614773565b60026123d891906147cd565b815181106123e9576123e8614823565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85838151811061243157612430614823565b5b602001015160f81c60f81b1660f81c60ff168151811061245457612453614823565b5b602001015160f81c60f81b8260028361246d9190614773565b600361247991906147cd565b8151811061248a57612489614823565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806124c390614852565b905061234e565b50809350505050919050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612511919061308f565b60206040518083038186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256191906148b0565b9050919050565b60008060008060008086806020019051810190612585919061494d565b9350935093509350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612635578173ffffffffffffffffffffffffffffffffffffffff1683826040516125e8919061433f565b60006040518083038185875af1925050503d8060008114612625576040519150601f19603f3d011682016040523d82523d6000602084013e61262a565b606091505b50508096505061273d565b61264184333086612bdb565b8373ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b815260040161267c9291906142da565b602060405180830381600087803b15801561269657600080fd5b505af11580156126aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ce9190613ce0565b508173ffffffffffffffffffffffffffffffffffffffff16816040516126f4919061433f565b6000604051808303816000865af19150503d8060008114612731576040519150601f19603f3d011682016040523d82523d6000602084013e612736565b606091505b5050809650505b85839550955050505050915091565b60006127588383612c64565b837f558c0ee8c786238cf77a23150b8f030420c53c82aa0488213ace44ee1cfc92f4848460405161278a9291906149d0565b60405180910390a2600090509392505050565b600080600080868060200190518101906127b7919061494d565b935093505092508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383886040518363ffffffff1660e01b81526004016127f99291906142da565b602060405180830381600087803b15801561281357600080fd5b505af1158015612827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284b9190613ce0565b5060006128d43073ffffffffffffffffffffffffffffffffffffffff166317fcb39b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561289757600080fd5b505afa1580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf9190613dfb565b6124d6565b905060008373ffffffffffffffffffffffffffffffffffffffff16836040516128fd919061433f565b6000604051808303816000865af19150503d806000811461293a576040519150601f19603f3d011682016040523d82523d6000602084013e61293f565b606091505b505090508061295657600095505050505050612bd4565b6000826129df3073ffffffffffffffffffffffffffffffffffffffff166317fcb39b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129a257600080fd5b505afa1580156129b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129da9190613dfb565b6124d6565b6129e99190614214565b90506000811115612bc95760003073ffffffffffffffffffffffffffffffffffffffff166317fcb39b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3c57600080fd5b505afa158015612a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a749190613dfb565b73ffffffffffffffffffffffffffffffffffffffff1682604051602401612a9b9190613364565b6040516020818303038152906040527f2e1a7d4d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612b25919061433f565b6000604051808303816000865af19150503d8060008114612b62576040519150601f19603f3d011682016040523d82523d6000602084013e612b67565b606091505b5050905080612b80576000975050505050505050612bd4565b60008973ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505090508098505050505050505050612bd4565b600196505050505050505b9392505050565b612c5e846323b872dd60e01b858585604051602401612bfc93929190613ff4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c95565b50505050565b612c91600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168284612d5c565b5050565b6000612cf7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612de29092919063ffffffff16565b9050600081511115612d575780806020019051810190612d179190613ce0565b612d56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4d90614a6b565b60405180910390fd5b5b505050565b612ddd8363a9059cbb60e01b8484604051602401612d7b9291906142da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c95565b505050565b6060612df18484600085612dfa565b90509392505050565b606082471015612e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3690614afd565b60405180910390fd5b612e4885612f0e565b612e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7e90614b69565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612eb0919061433f565b60006040518083038185875af1925050503d8060008114612eed576040519150601f19603f3d011682016040523d82523d6000602084013e612ef2565b606091505b5091509150612f02828286612f31565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315612f4157829050612f91565b600083511115612f545782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f889190614064565b60405180910390fd5b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612fdd612fd8612fd384612f98565b612fb8565b612f98565b9050919050565b6000612fef82612fc2565b9050919050565b600061300182612fe4565b9050919050565b61301181612ff6565b82525050565b600060208201905061302c6000830184613008565b92915050565b600061303d82612fe4565b9050919050565b61304d81613032565b82525050565b60006020820190506130686000830184613044565b92915050565b600061307982612f98565b9050919050565b6130898161306e565b82525050565b60006020820190506130a46000830184613080565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6130d1816130be565b81146130dc57600080fd5b50565b6000813590506130ee816130c8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112613119576131186130f4565b5b8235905067ffffffffffffffff811115613136576131356130f9565b5b602083019150836001820283011115613152576131516130fe565b5b9250929050565b60008083601f84011261316f5761316e6130f4565b5b8235905067ffffffffffffffff81111561318c5761318b6130f9565b5b6020830191508360018202830111156131a8576131a76130fe565b5b9250929050565b6000819050919050565b6131c2816131af565b81146131cd57600080fd5b50565b6000813590506131df816131b9565b92915050565b60008060008060008060008060008060c08b8d031215613208576132076130b4565b5b60006132168d828e016130df565b9a505060208b013567ffffffffffffffff811115613237576132366130b9565b5b6132438d828e01613103565b995099505060408b013567ffffffffffffffff811115613266576132656130b9565b5b6132728d828e01613103565b975097505060608b013567ffffffffffffffff811115613295576132946130b9565b5b6132a18d828e01613159565b955095505060808b013567ffffffffffffffff8111156132c4576132c36130b9565b5b6132d08d828e01613103565b935093505060a06132e38d828e016131d0565b9150509295989b9194979a5092959850565b60008060006040848603121561330e5761330d6130b4565b5b600061331c868287016131d0565b935050602084013567ffffffffffffffff81111561333d5761333c6130b9565b5b61334986828701613159565b92509250509250925092565b61335e816131af565b82525050565b60006020820190506133796000830184613355565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6133cd82613384565b810181811067ffffffffffffffff821117156133ec576133eb613395565b5b80604052505050565b60006133ff6130aa565b905061340b82826133c4565b919050565b600067ffffffffffffffff82111561342b5761342a613395565b5b61343482613384565b9050602081019050919050565b82818337600083830152505050565b600061346361345e84613410565b6133f5565b90508281526020810184848401111561347f5761347e61337f565b5b61348a848285613441565b509392505050565b600082601f8301126134a7576134a66130f4565b5b81356134b7848260208601613450565b91505092915050565b600063ffffffff82169050919050565b6134d9816134c0565b81146134e457600080fd5b50565b6000813590506134f6816134d0565b92915050565b6135058161306e565b811461351057600080fd5b50565b600081359050613522816134fc565b92915050565b600080600060608486031215613541576135406130b4565b5b600084013567ffffffffffffffff81111561355f5761355e6130b9565b5b61356b86828701613492565b935050602061357c868287016134e7565b925050604061358d86828701613513565b9150509250925092565b60006135a282612fe4565b9050919050565b6135b281613597565b82525050565b60006020820190506135cd60008301846135a9565b92915050565b60008060008060008060006080888a0312156135f2576135f16130b4565b5b60006136008a828b016130df565b975050602088013567ffffffffffffffff811115613621576136206130b9565b5b61362d8a828b01613103565b9650965050604088013567ffffffffffffffff8111156136505761364f6130b9565b5b61365c8a828b01613103565b9450945050606088013567ffffffffffffffff81111561367f5761367e6130b9565b5b61368b8a828b01613159565b925092505092959891949750929550565b6000602082840312156136b2576136b16130b4565b5b600082013567ffffffffffffffff8111156136d0576136cf6130b9565b5b6136dc84828501613492565b91505092915050565b6136ee816134c0565b82525050565b600060208201905061370960008301846136e5565b92915050565b60008060008060008060006080888a03121561372e5761372d6130b4565b5b600088013567ffffffffffffffff81111561374c5761374b6130b9565b5b6137588a828b01613103565b9750975050602088013567ffffffffffffffff81111561377b5761377a6130b9565b5b6137878a828b01613103565b9550955050604088013567ffffffffffffffff8111156137aa576137a96130b9565b5b6137b68a828b01613159565b935093505060606137c98a828b01613513565b91505092959891949750929550565b600067ffffffffffffffff8211156137f3576137f2613395565b5b6137fc82613384565b9050602081019050919050565b600061381c613817846137d8565b6133f5565b9050828152602081018484840111156138385761383761337f565b5b613843848285613441565b509392505050565b600082601f8301126138605761385f6130f4565b5b8135613870848260208601613809565b91505092915050565b600061ffff82169050919050565b61389081613879565b811461389b57600080fd5b50565b6000813590506138ad81613887565b92915050565b60008060008060008060c087890312156138d0576138cf6130b4565b5b600087013567ffffffffffffffff8111156138ee576138ed6130b9565b5b6138fa89828a01613492565b965050602061390b89828a016131d0565b955050604087013567ffffffffffffffff81111561392c5761392b6130b9565b5b61393889828a0161384b565b945050606061394989828a016130df565b935050608061395a89828a01613513565b92505060a061396b89828a0161389e565b9150509295509295509295565b60008060008060008060c08789031215613995576139946130b4565b5b600087013567ffffffffffffffff8111156139b3576139b26130b9565b5b6139bf89828a01613492565b965050602087013567ffffffffffffffff8111156139e0576139df6130b9565b5b6139ec89828a0161384b565b955050604087013567ffffffffffffffff811115613a0d57613a0c6130b9565b5b613a1989828a0161384b565b9450506060613a2a89828a016130df565b9350506080613a3b89828a01613513565b92505060a0613a4c89828a0161389e565b9150509295509295509295565b60008060008060008060008060008060c08b8d031215613a7c57613a7b6130b4565b5b60008b013567ffffffffffffffff811115613a9a57613a996130b9565b5b613aa68d828e01613103565b9a509a505060208b013567ffffffffffffffff811115613ac957613ac86130b9565b5b613ad58d828e01613103565b985098505060408b013567ffffffffffffffff811115613af857613af76130b9565b5b613b048d828e01613159565b965096505060608b013567ffffffffffffffff811115613b2757613b266130b9565b5b613b338d828e01613103565b94509450506080613b468d828e016131d0565b92505060a0613b578d828e01613513565b9150509295989b9194979a5092959850565b600060208284031215613b7f57613b7e6130b4565b5b6000613b8d84828501613513565b91505092915050565b600081905092915050565b6000613bad8385613b96565b9350613bba838584613441565b82840190509392505050565b6000613bd3828486613ba1565b91508190509392505050565b613be8816130be565b82525050565b600082825260208201905092915050565b6000613c0b8385613bee565b9350613c18838584613441565b613c2183613384565b840190509392505050565b600060c082019050613c41600083018c613bdf565b8181036020830152613c54818a8c613bff565b90508181036040830152613c6981888a613bff565b9050613c786060830187613bdf565b8181036080830152613c8b818587613bff565b9050613c9a60a0830184613355565b9a9950505050505050505050565b60008115159050919050565b613cbd81613ca8565b8114613cc857600080fd5b50565b600081519050613cda81613cb4565b92915050565b600060208284031215613cf657613cf56130b4565b5b6000613d0484828501613ccb565b91505092915050565b600082825260208201905092915050565b6000613d2a8385613d0d565b9350613d37838584613441565b613d4083613384565b840190509392505050565b600060a0820190508181036000830152613d66818b8d613bff565b90508181036020830152613d7b81898b613bff565b90508181036040830152613d90818789613d1e565b90508181036060830152613da5818587613bff565b9050613db46080830184613355565b9a9950505050505050505050565b60006020820190508181036000830152613ddd818486613bff565b90509392505050565b600081519050613df5816134fc565b92915050565b600060208284031215613e1157613e106130b4565b5b6000613e1f84828501613de6565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015613e5c578082015181840152602081019050613e41565b83811115613e6b576000848401525b50505050565b6000613e7c82613e28565b613e868185613e33565b9350613e96818560208601613e3e565b80840191505092915050565b6000613eae8284613e71565b915081905092915050565b6000608082019050613ece6000830189613bdf565b8181036020830152613ee1818789613bff565b90508181036040830152613ef6818587613bff565b9050613f056060830184613bdf565b979650505050505050565b60006060820190508181036000830152613f2b81888a613bff565b90508181036020830152613f40818688613bff565b90508181036040830152613f55818486613d1e565b9050979650505050505050565b7f436972636c655377617045786563757461626c653a20696e76616c696420646560008201527f7374696e6174696f6e20636861696e0000000000000000000000000000000000602082015250565b6000613fbe602f83613bee565b9150613fc982613f62565b604082019050919050565b60006020820190508181036000830152613fed81613fb1565b9050919050565b60006060820190506140096000830186613080565b6140166020830185613080565b6140236040830184613355565b949350505050565b600061403682613e28565b6140408185613bee565b9350614050818560208601613e3e565b61405981613384565b840191505092915050565b6000602082019050818103600083015261407e818461402b565b905092915050565b600081519050614095816134d0565b92915050565b6000602082840312156140b1576140b06130b4565b5b60006140bf84828501614086565b91505092915050565b60006080820190506140dd6000830187613355565b6140ea60208301866136e5565b6140f76040830185613bdf565b6141046060830184613080565b95945050505050565b7f4445504f5349545f4641494c4544000000000000000000000000000000000000600082015250565b6000614143600e83613bee565b915061414e8261410d565b602082019050919050565b6000602082019050818103600083015261417281614136565b9050919050565b7f4255524e5f4641494c4544000000000000000000000000000000000000000000600082015250565b60006141af600b83613bee565b91506141ba82614179565b602082019050919050565b600060208201905081810360008301526141de816141a2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061421f826131af565b915061422a836131af565b92508282101561423d5761423c6141e5565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006142a4602683613bee565b91506142af82614248565b604082019050919050565b600060208201905081810360008301526142d381614297565b9050919050565b60006040820190506142ef6000830185613080565b6142fc6020830184613355565b9392505050565b600081519050919050565b600061431982614303565b6143238185613b96565b9350614333818560208601613e3e565b80840191505092915050565b600061434b828461430e565b915081905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061438c602083613bee565b915061439782614356565b602082019050919050565b600060208201905081810360008301526143bb8161437f565b9050919050565b60006143cd82612f98565b9050919050565b6143dd816143c2565b81146143e857600080fd5b50565b6000813590506143fa816143d4565b92915050565b600080600080600060a0868803121561441c5761441b6130b4565b5b600086013567ffffffffffffffff81111561443a576144396130b9565b5b6144468882890161384b565b9550506020614457888289016131d0565b9450506040614468888289016130df565b9350506060614479888289016143eb565b925050608061448a8882890161389e565b9150509295509295909350565b60006144a282614303565b6144ac8185613d0d565b93506144bc818560208601613e3e565b6144c581613384565b840191505092915050565b6144d981613879565b82525050565b600060a08201905081810360008301526144f98188614497565b90506145086020830187613355565b6145156040830186613bdf565b6145226060830185613080565b61452f60808301846144d0565b9695505050505050565b600060a08201905061454e6000830188613080565b8181036020830152614560818761402b565b90508181036040830152614574818661402b565b905081810360608301526145888185614497565b90506145976080830184613080565b9695505050505050565b600060608201905081810360008301526145bb818661402b565b905081810360208301526145cf818561402b565b905081810360408301526145e38184614497565b9050949350505050565b60006060820190506146026000830186613355565b8181036020830152614614818561402b565b905081810360408301526146288184614497565b9050949350505050565b7f54524144455f4641494c45440000000000000000000000000000000000000000600082015250565b6000614668600c83613bee565b915061467382614632565b602082019050919050565b600060208201905081810360008301526146978161465b565b9050919050565b6000815190506146ad816143d4565b92915050565b6000602082840312156146c9576146c86130b4565b5b60006146d78482850161469e565b91505092915050565b60006040820190506146f56000830185613355565b81810360208301526147078184614497565b90509392505050565b60008160601b9050919050565b600061472882614710565b9050919050565b600061473a8261471d565b9050919050565b61475261474d8261306e565b61472f565b82525050565b60006147648284614741565b60148201915081905092915050565b600061477e826131af565b9150614789836131af565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156147c2576147c16141e5565b5b828202905092915050565b60006147d8826131af565b91506147e3836131af565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614818576148176141e5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061485d826131af565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156148905761488f6141e5565b5b600182019050919050565b6000815190506148aa816131b9565b92915050565b6000602082840312156148c6576148c56130b4565b5b60006148d48482850161489b565b91505092915050565b60006148f06148eb846137d8565b6133f5565b90508281526020810184848401111561490c5761490b61337f565b5b614917848285613e3e565b509392505050565b600082601f830112614934576149336130f4565b5b81516149448482602086016148dd565b91505092915050565b60008060008060808587031215614967576149666130b4565b5b60006149758782880161469e565b94505060206149868782880161489b565b93505060406149978782880161469e565b925050606085015167ffffffffffffffff8111156149b8576149b76130b9565b5b6149c48782880161491f565b91505092959194509250565b60006040820190506149e56000830185613355565b6149f26020830184613080565b9392505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614a55602a83613bee565b9150614a60826149f9565b604082019050919050565b60006020820190508181036000830152614a8481614a48565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614ae7602683613bee565b9150614af282614a8b565b604082019050919050565b60006020820190508181036000830152614b1681614ada565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614b53601d83613bee565b9150614b5e82614b1d565b602082019050919050565b60006020820190508181036000830152614b8281614b46565b905091905056fea264697066735822122088c036941911f42ecbcdb1ceffa7a35b2841f13581e719eea37fe4ab4e2091c164736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "gateway",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAxelarGateway)1097"
      },
      {
        "astId": 18,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "forecallers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1630,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3562,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "usdc",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(USDC)5316"
      },
      {
        "astId": 3564,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3567,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "circleBridge",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(CircleBridge)3501"
      },
      {
        "astId": 3571,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "siblings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 3575,
        "contract": "contracts/CircleSwapExecutable.sol:CircleSwapExecutable",
        "label": "destinationDomains",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CircleBridge)3501": {
        "encoding": "inplace",
        "label": "contract CircleBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IAxelarGateway)1097": {
        "encoding": "inplace",
        "label": "contract IAxelarGateway",
        "numberOfBytes": "20"
      },
      "t_contract(USDC)5316": {
        "encoding": "inplace",
        "label": "contract USDC",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_uint32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}